to add a command to mavproxy.py, need to alter the command_map, which contains the list of commands and brief description
added blobkTrack.py to modules folder, needs to be updated with stable version from ground station
	camera variables to store: hvsL, hsvU, blurRad, flagShowVis, capture, flagOut
include hsvUpdate in the main loop

basic camera integration complete but fails

try to run image proc as a seeparate process.
	possible cf. tcp examples on FSLtemp

MAVlink: use message ID's starting at 200. we now know how to create new MAVlink messages. Now we must learn how to integrate them into the GS and the MAV.

I believe I have edited Arduplane\GCS_Mavlink.ino to receive a VSCL MAVLink message and bounce back a 1 using the same message ID.
	must include VSCL header files in GCS_Mavlink.h
	Now, I must figure out how to get the GCS to transmit and receive the same message.
	It looks like any MAVLink commands are going to be processed in mavproxy.py in function master_callback. However, I may be able to SEND it from an external process. 
	Otherwise, perhaps I can incorporate this functionality into periodic_tasks().
	New plan: piggyback centroid acquisition from camera streaming process into periodic_tasks. Should run at 1 Hz.
	mavutil contains a periodic_event class that should work nicely.

GCS_MAV communication achieved. MAV receives "42", returns "24", which is echo printed in the GCS console. Next step: transmit a change in bank angle to the vehicle. 
	Have the vehicle tranmit back a 1 or something if it receives for confirmation.

mpstate.status.flightmode: holds the current flight mode.

use ALT_HOLD_FBWCM to limit altitude (floor value) in autonomous mode?
target airspeed is set in navigation - I tried to set it to 11 m/s, not sure
auto-flap settings in Attitude.ino can probably be removed
in non-manual flight modes, stabilize() is called at 50 Hz in the fast loop.
Is the rudder just going to be idle during all of this? I guess that's what I'm hoping for...?




*---------------------------*
We want to modify this ground station to facilitate autolanding.
I envision a new "autoland" command that would automatically command a sequence of waypoints, then switch on the autolanding mode after the last waypoint.
Things that MAVProxy alerady does: load waypoints from file, allow groundside to transmit waypoints up.
Things that I do not currently believe are implemented: a way to verify that the vehicle has reached a waypoint, triggering the next one.
	* there is a verify_nav_wp() command that the vehicle can use to confirm it has reached a waypoint - do not know how this is triggered

* Edit: there is a way to pre-load commands in the autopilot itself via EEPROM. This could be promising - can I pre-load a sequence of waypoints?

* The simplest way to do this is probably to store the desired waypoints in a file and upload them manually via MAVProxy, then maually engage the automatic landing. 
What I do not know is how MAVProxy handles waypoints... but presumambly I can transmit them and then get the vehicle to navigate to them.
THIS MEANS WE NEED THE MAP TO WORK or would really like to have it, a little silly otherwise.